@model IEnumerable<Group3_LIbraryManagement_AGAAPP.Models.Book>

@{
    ViewData["Title"] = "Books";
    Layout = "~/Views/Shared/Admin/_AdminLayout.cshtml";
}

<!-- Main Card -->
<div class="card shadow mb-4">
    <div class="card-header py-3 d-flex justify-content-between align-items-center">
        <h6 class="m-0 font-weight-bold text-primary">Book Management</h6>
        <a asp-action="Create" class="btn btn-primary btn-sm shadow-sm" data-bs-toggle="tooltip" title="Add a new book">
            <i class="fas fa-plus me-1"></i> Create New Book
        </a>
        
    </div>
    <div class="card-body">
        <!-- Books Table -->
        <div class="table-responsive">
            <table class="table table-bordered table-hover align-middle" id="dataTable" width="100%" cellspacing="0">
                <thead class="bg-light">
                    <tr>
                        <th scope="col">Title</th>
                        <th scope="col">ISBN Code</th>
                        <th scope="col">Publication</th>
                        <th scope="col">Shelf Location</th>
                        <th scope="col">Book Condition</th>
                        <th scope="col">Status</th>
                        <th scope="col" class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var book in Model)
                    {
                        <tr>
                            <td>@book.Title</td>
                            <td>@book.ISBN_Code</td>
                            <td>@book.Publication?.Title</td>
                            <td>@book.ShelfLocation</td>
                            <td>@book.BookCondition</td>
                            <td>
                                <span class="badge @(book.Status == "Available" ? "bg-success" : "bg-danger") text-white">
                                    @book.Status
                                </span>
                            </td>
                            <td class="text-center">
                                <a asp-action="Edit" asp-route-id="@book.Id" class="btn btn-sm btn-warning shadow-sm me-2" data-bs-toggle="tooltip" title="Edit this book">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <button onclick="confirmDelete('@book.Id')" class="btn btn-sm btn-danger shadow-sm" data-bs-toggle="tooltip" title="Delete this book">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="card-footer">
        <a asp-action="view_book_stock" class="btn btn-primary btn-sm shadow-sm" data-bs-toggle="tooltip" title="View Book Stock">
            <i class="fas fa-eye me-1"></i> View Stock
        </a>
    </div>
</div>

<!-- SweetAlert Script -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // SweetAlert Confirmation for Delete
    function confirmDelete(id) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                // Send a POST request to delete the book
                fetch(`/Books/Delete/${id}`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                }).then(response => {
                    if (response.ok) {
                        window.location.href = '/Books'; // Redirect to the Index page
                    } else {
                        response.text().then(errorMessage => {
                            Swal.fire('Error', errorMessage || 'Failed to delete the book.', 'error');
                        });
                    }
                }).catch(error => {
                    Swal.fire('Error', 'An unexpected error occurred.', 'error');
                });
            }
        });
    }

    // SweetAlert Success/Error Notifications
    const successMessage = '@TempData["SuccessMessage"]';
    const errorMessage = '@TempData["ErrorMessage"]';

    if (successMessage) {
        Swal.fire({
            title: 'Success!',
            text: successMessage,
            icon: 'success',
            confirmButtonText: 'OK'
        });
    }

    if (errorMessage) {
        Swal.fire({
            title: 'Error!',
            text: errorMessage,
            icon: 'error',
            confirmButtonText: 'OK'
        });
    }

    // Initialize Tooltips
    document.addEventListener('DOMContentLoaded', () => {
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
    });
</script>